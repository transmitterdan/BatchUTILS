# Before installing Ubuntu or Debian turn on WSL in Windows 10
# Run these in PowerShell as Adminstrator
Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
# Restart Windows 10

# Install Ubuntu or Debian from Windows store
# Then from CMD or PS start Ubuntu or Debian to set up username and password
WSL -d Ubuntu or WSL -d Debian

# Run this from Windows CMD or PS prompt if you want to use WSL 2
wsl --set-version Ubuntu 2

# Run this from Ubuntu shell prompt
sudo apt-get update && sudo apt-get -y dist-upgrade

# For ubuntu
sudo apt-get -y install xfce4 xubuntu-desktop xrdp

# for debian
sudo apt-get -y install xfce4 xdeb xrdp
# Select the lighdm display manager when prompted

echo xfce4-session > ~/.xsession

# Edit /etc/xrdp/xrdp.ini to set the listening port. Probably you want 3390 or 3391 instead of 3389.
# Usually the local windows rdp server is already using 3389.
sudo sed -i -- 's/3389/3390/g' /etc/xrdp/xrdp.ini
sudo service xrdp restart

# Set up ssh on port 2222 in case you want to access using WinSCP
sudo service ssh stop
sudo rm -v /etc/ssh/ssh_host_*
sudo sed -i -- 's/#Port 22/Port 2222/g' /etc/ssh/sshd_config
sudo sed -i -- 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
sudo dpkg-reconfigure openssh-server
sudo service ssh start

sudo apt install -y git cmake build-essential sqlite3 libudev-dev libusb-1.0-0-dev gettext libunarr-dev gpsd gpsd-clients libgps-dev liblzma-dev libsndfile1-dev libsqlite3-dev libbz2-dev liblz4-dev libtinyxml-dev libcurl4-openssl-dev libportaudio2 portaudio19-dev htop libelf-dev libexpat1-dev libcairo2-dev libarchive-dev libexif-dev libjpeg-dev wx-common libgtk-3-dev flatpak libwxgtk-webview3.0-gtk3-dev libwxgtk3.0-gtk3-dev 

git clone https://github.com/opencpn/opencpn

cd opencpn && mkdir build && cd build && cmake .. && make -j 4

## Restart WSL and WSL virtual network
## Open PowerShell window in Adminstrator mode
echo "Restarting WSL Service"
Restart-Service LxssManager
echo "Restarting Host Network Service"
Stop-Service -name "hns"
Start-Service -name "hns"
echo "Restarting Hyper-V adapters"
Get-NetAdapter -IncludeHidden | Where-Object `
    {$_.InterfaceDescription.StartsWith('Hyper-V Virtual Switch Extension Adapter')} `
    | Disable-NetAdapter -Confirm:$False
Get-NetAdapter -IncludeHidden | Where-Object `
    {$_.InterfaceDescription.StartsWith('Hyper-V Virtual Switch Extension Adapter')} `
    | Enable-NetAdapter -Confirm:$False
	
Building wxWidgets in WSL

sudo apt install build-essential libwebkit2gtk-4.0-dev libunarr-dev libtiff-dev libnotify-dev libsecret-1-dev libcppunit-dev libjpeg-dev freeglut3 freeglut3-dev libsdl1.2-dev libgstreamer-plugins-good1.0-dev
mkdir wxWidgets/gtkBuild
cd wxWidgets/gtkBuild
../configure --with-gtk --enable-debug
make clean
make -j 8

# QT

mkdir wxWidgets/qtBuild
cd wxWidgets/qtBuild
sudo apt -y install build-essential qt5-default libcppunit-dev libunarr-dev libjpeg-dev libtiff5-dev ubuntu-restricted-extras freeglut3 freeglut3-dev libsdl1.2-dev libgstreamer-plugins-good1.0-dev libqt5webview5-dev libqt5opengl5-dev
../configure --with-qt --enable-debug
make -j 8

# Install Eclipse on Ubuntu WSL
sudo apt install default-jre ninja-build
# download Eclipse IDE for C++ Linux x86_64 from https://www.eclipse.org/downloads/packages/
# extract .gz file after download completes
sudo tar xf /mnt/c/Users/Dan/Downloads/eclipse-cpp-2020-12-R-linux-gtk-x86_64.tar.gz -C /opt
sudo ln -s /opt/eclipse/eclipse /usr/local/bin/
mkdir ~/transmitterdan/ecl
cd ~/transmitterdan/ecl
cmake -G "Eclipse CDT4" -DCMAKE_BUILD_TYPE=Debug ../opencpn
eclipse


cmake -DOCPN_USE_CHART_LIST:BOOL=ON -DOCPN_BUNDLE_GSHHS:BOOL=ON -DOCPN_BUNDLE_TCDATA:BOOL=ON -DOCPN_VERBOSE:BOOL=OFF ..